{"version":3,"sources":["components/index.js","components/buttons.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","onClick","button","equals","clear","setState","current","state","includes","val","result","match","eval","parseFloat","toFixed","bind","id","this","Component","Buttons","name","class","e","target","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01309465.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport Buttons from './buttons'\nimport './styles.css'\n\nexport default class Calculator extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            result:\"\",\n            current:\"\",\n        }\n        this.equals = this.equals.bind(this)\n        this.clear = this.clear.bind(this)\n    }\n    onClick=(button)=>{\n      \n        if(button == \"=\"){\n            this.equals()\n        }else{\n            if(button == \"AC\"){\n                this.clear()\n            }else{\n                this.setState({\n                    current: this.state.current + button\n                })\n               \n            }\n        }\n    \n    }\n    equals = () => {\n       \n        if(this.state.current.includes(\"=\")){\n            let val = `${this.state.result} = ${this.state.result}`;\n            this.setState({\n              current: val\n            });\n          } else if(this.state.current != \"\" && this.state.current.match(/[+\\-*\\/]/) != null && this.state.current.match(/[+\\-*\\/]$/) == null) {\n            let result =(eval(this.state.current)) ? eval(this.state.current) : parseFloat(eval(this.state.current).toFixed(5));\n            let val = this.state.current;\n            val += ` = ${result}`;\n            this.setState({\n              result: result,\n              current: val\n            });\n          }\n       \n    }\n    clear = () => {\n        this.setState({\n            result:0,\n            current:\"\"\n        })\n     }\n    render(){\n        return(\n            <div id=\"calculator\">\n                <div id=\"display\">\n                    {this.state.current}\n                  <p>{this.state.result}</p>\n                </div>\n                <Buttons onClick={this.onClick}/>\n            </div>\n        );\n    }\n}","import React,{Component} from 'react'\nimport './styles.css'\nexport default class Buttons extends Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <div id=\"buttons\">\n                <div>\n                    <button name=\"AC\" class=\"bigWidth\"  id=\"clear\" \n                    onClick={e=> this.props.onClick(e.target.name)}>AC</button>\n                    <button name=\"/\" id=\"divide\" \n                    onClick={e=> this.props.onClick(e.target.name)}>/</button>\n                    <button name=\"*\" id=\"multiply\"\n                    onClick={e=> this.props.onClick(e.target.name)}>*</button>\n                </div>\n                <div>\n                    <button name=\"7\" id=\"seven\"\n                      onClick={e=> this.props.onClick(e.target.name)}>7</button>\n                    <button name=\"8\" id=\"eight\"\n                      onClick={e=> this.props.onClick(e.target.name)}>8</button>\n                    <button name=\"9\" id=\"nine\" \n                    onClick={e=> this.props.onClick(e.target.name)}>9</button>\n                    <button name=\"-\" id=\"subtract\"\n                    onClick={e=> this.props.onClick(e.target.name)}>-</button>\n                </div>\n                <div>\n                    <button name=\"4\" id=\"four\"\n                      onClick={e=> this.props.onClick(e.target.name)}>4</button>\n                    <button name=\"5\" id=\"five\"\n                      onClick={e=> this.props.onClick(e.target.name)}>5</button>\n                    <button name=\"6\" id=\"six\"\n                      onClick={e=> this.props.onClick(e.target.name)}>6</button>\n                    <button name=\"+\" id=\"add\"\n                      onClick={e=> this.props.onClick(e.target.name)}>+</button>\n                </div>\n                <div class=\"forFlex\">\n                    <div >\n                        <button name=\"1\" id=\"one\"\n                          onClick={e=> this.props.onClick(e.target.name)}>1</button>\n                        <button name=\"2\" id=\"two\"\n                          onClick={e=> this.props.onClick(e.target.name)}>2</button>\n                        <button name=\"3\" id=\"three\"\n                          onClick={e=> this.props.onClick(e.target.name)}>3</button>\n                        <button name=\"0\" class=\"bigWidth\" id=\"zero\"\n                          onClick={e=> this.props.onClick(e.target.name)}>0</button>\n                        <button name=\".\" id=\"decimal\"\n                          onClick={e=> this.props.onClick(e.target.name)}>.</button>\n                    </div>\n                     <button name=\"=\" id=\"equals\"\n                      onClick={e=> this.props.onClick(e.target.name)}>=</button>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Calculator from './components/index'\nimport './components/styles.css'\nfunction App() {\n  return (\n    <div class=\"main\">\n       <Calculator/>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}